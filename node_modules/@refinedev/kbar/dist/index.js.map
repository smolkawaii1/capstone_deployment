{"version":3,"sources":["../src/index.tsx","../src/hooks/useRefineKbar/index.tsx","../src/definitions/capitalize/index.ts","../src/components/commandBar/index.tsx","../src/components/renderResults/index.tsx","../src/components/resultItem/index.tsx","../src/components/refineKbar/index.tsx"],"sourcesContent":["import React, { createContext } from \"react\";\nimport { KBarProvider, KBarProviderProps } from \"kbar\";\n\nimport { CommandBar } from \"@components\";\n\ninterface IKBarProviderProps extends KBarProviderProps {\n    commandBarProps?: React.ComponentProps<typeof CommandBar>;\n}\n\nexport const RefineKbarPropsContext = createContext<\n    IKBarProviderProps[\"commandBarProps\"]\n>({});\n\nexport const RefineKbarProvider: React.FunctionComponent<\n    IKBarProviderProps & { children: React.ReactNode }\n> = ({ children, commandBarProps }) => {\n    return (\n        <RefineKbarPropsContext.Provider value={commandBarProps ?? {}}>\n            <KBarProvider>{children}</KBarProvider>\n        </RefineKbarPropsContext.Provider>\n    );\n};\n\nexport * from \"kbar\";\n\nexport { useRefineKbar } from \"@hooks\";\nexport { RefineKbar } from \"@components\";\n","import { useEffect, useState, useContext } from \"react\";\nimport {\n    useNavigation,\n    useDelete,\n    useTranslate,\n    useResource,\n    IResourceItem,\n    useCanWithoutCache,\n    userFriendlyResourceName,\n    useRouterType,\n    useGo,\n} from \"@refinedev/core\";\nimport {\n    useRegisterActions,\n    createAction,\n    Action,\n    KBarContext,\n    VisualState,\n} from \"kbar\";\n\nimport { capitalize } from \"@definitions\";\nimport { useGetToPath } from \"@refinedev/core\";\n\nenum RefineKbarActionType {\n    List = \"list\",\n    Create = \"create\",\n    Show = \"show\",\n    Edit = \"edit\",\n    Delete = \"delete\",\n}\n\nexport const useRefineKbar = (): void => {\n    const t = useTranslate();\n    const {\n        resource: resourceFromParams,\n        resources,\n        id: idFromParams,\n        action: actionFromParams,\n    } = useResource();\n    const routerType = useRouterType();\n    const getToPath = useGetToPath();\n    const go = useGo();\n    const { mutate } = useDelete();\n    const {\n        push,\n        list: goToList,\n        create: goToCreate,\n        show: goToShow,\n        edit: goToEdit,\n    } = useNavigation();\n\n    const kbarContext = useContext(KBarContext);\n\n    const { can } = useCanWithoutCache();\n\n    const [actions, setActions] = useState<Action[]>([]);\n\n    useEffect(() => {\n        const preaparedActions = async () => {\n            return await Promise.all(\n                moveActionToFirst().flatMap((resource) => {\n                    return createActionWithResource(resource);\n                }),\n            );\n        };\n\n        preaparedActions().then((actions) => {\n            return setActions(actions.flatMap((action) => action));\n        });\n    }, [resources, idFromParams, resourceFromParams, actionFromParams]);\n\n    useEffect(() => {\n        if (actions.length === 0) {\n            kbarContext.query.setVisualState(VisualState.hidden);\n        }\n    }, [actions]);\n\n    const moveActionToFirst = (): IResourceItem[] => {\n        const orderedResources = [...resources];\n        const fromIndex = orderedResources?.findIndex(\n            (resource) =>\n                (resource.identifier ?? resource?.name) ===\n                (resourceFromParams?.identifier ?? resourceFromParams?.name),\n        );\n\n        if (fromIndex > 0) {\n            const element = orderedResources[fromIndex];\n            orderedResources.splice(fromIndex, 1);\n            orderedResources.splice(0, 0, element);\n        }\n\n        return orderedResources;\n    };\n\n    const createActionWithResource = async (resource: IResourceItem) => {\n        const {\n            name,\n            label: deprecatedLabel,\n            list,\n            create,\n            canCreate,\n            canEdit,\n            canShow,\n            icon: deprecatedIcon,\n            show,\n            canDelete: deprecatedCanDelete,\n            edit,\n            route,\n        } = resource;\n\n        const label =\n            resource?.meta?.label ??\n            resource?.options?.label ??\n            deprecatedLabel;\n\n        const icon =\n            resource?.meta?.icon ?? resource?.options?.icon ?? deprecatedIcon;\n\n        const canDelete =\n            resource?.meta?.canDelete ??\n            resource?.options?.canDelete ??\n            deprecatedCanDelete;\n\n        const section =\n            label ??\n            t(\n                `${resource.name}.${resource.name}`,\n                userFriendlyResourceName(resource.name, \"plural\"),\n            );\n        const tempActions: Action[] = [];\n\n        if (\n            list &&\n            ((resourceFromParams !== undefined &&\n                resourceFromParams?.name !== name) ||\n                (actionFromParams !== undefined &&\n                    resourceFromParams?.name === name))\n        ) {\n            const { can: canList } = (await can?.({\n                resource: name,\n                action: RefineKbarActionType.Show,\n                params: { id: idFromParams, resource },\n            })) || { can: true };\n            if (canList) {\n                tempActions.push(\n                    createAction({\n                        name: t(\n                            `actions.list`,\n                            capitalize(RefineKbarActionType.List),\n                        ),\n                        section,\n                        icon,\n                        perform: () => {\n                            const p = getToPath({\n                                resource,\n                                action: \"list\",\n                                legacy: routerType === \"legacy\",\n                            });\n\n                            if (p) {\n                                if (routerType === \"legacy\") {\n                                    push(p);\n                                } else {\n                                    go({ to: p });\n                                }\n                            }\n                        },\n                    }),\n                );\n            }\n        }\n        if (\n            (canCreate || !!create) &&\n            create &&\n            (RefineKbarActionType.Create !== actionFromParams ||\n                resourceFromParams?.name !== name)\n        ) {\n            const { can: canAccessCreate } = (await can?.({\n                resource: name,\n                action: RefineKbarActionType.Create,\n                params: { resource },\n            })) || { can: true };\n\n            if (canAccessCreate) {\n                tempActions.push(\n                    createAction({\n                        name: t(\n                            `actions.create`,\n                            capitalize(RefineKbarActionType.Create),\n                        ),\n                        section,\n                        icon,\n                        keywords: \"new\",\n                        perform: () => {\n                            const p = getToPath({\n                                resource,\n                                action: \"create\",\n                                legacy: routerType === \"legacy\",\n                            });\n\n                            if (p) {\n                                if (routerType === \"legacy\") {\n                                    push(p);\n                                } else {\n                                    go({ to: p });\n                                }\n                            }\n                        },\n                    }),\n                );\n            }\n        }\n\n        if (resourceFromParams?.name === name && idFromParams) {\n            if (\n                (canShow || !!show) &&\n                show &&\n                RefineKbarActionType.Show !== actionFromParams\n            ) {\n                const { can: canAccessShow } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n\n                if (canAccessShow) {\n                    tempActions.push(\n                        createAction({\n                            name: t(\n                                `actions.show`,\n                                capitalize(RefineKbarActionType.Show),\n                            ),\n                            section,\n                            icon,\n                            perform: () => {\n                                const p = getToPath({\n                                    resource,\n                                    action: \"show\",\n                                    legacy: routerType === \"legacy\",\n                                    meta: {\n                                        id: idFromParams,\n                                    },\n                                });\n\n                                if (p) {\n                                    if (routerType === \"legacy\") {\n                                        push(p);\n                                    } else {\n                                        go({ to: p });\n                                    }\n                                }\n                            },\n                        }),\n                    );\n                }\n            }\n            if (\n                (canEdit || !!edit) &&\n                edit &&\n                RefineKbarActionType.Edit !== actionFromParams\n            ) {\n                const { can: canAccessEdit } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n                if (canAccessEdit) {\n                    tempActions.push(\n                        createAction({\n                            name: t(\n                                `actions.edit`,\n                                capitalize(RefineKbarActionType.Edit),\n                            ),\n                            section,\n                            icon,\n                            perform: () => {\n                                const p = getToPath({\n                                    resource,\n                                    action: \"edit\",\n                                    legacy: routerType === \"legacy\",\n                                    meta: {\n                                        id: idFromParams,\n                                    },\n                                });\n\n                                if (p) {\n                                    if (routerType === \"legacy\") {\n                                        push(p);\n                                    } else {\n                                        go({ to: p });\n                                    }\n                                }\n                            },\n                        }),\n                    );\n                }\n            }\n            if (canDelete) {\n                const { can: canAccessDelete } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n                if (canAccessDelete) {\n                    tempActions.push(\n                        {\n                            id: \"delete\",\n                            name: t(\n                                `actions.delete`,\n                                capitalize(RefineKbarActionType.Delete),\n                            ),\n                            section,\n                            icon,\n                        },\n                        createAction({\n                            name: t(\n                                `buttons.delete`,\n                                capitalize(RefineKbarActionType.Delete),\n                            ),\n                            section: t(`buttons.confirm`, \"Are you sure?\"),\n                            parent: \"delete\",\n                            perform: () => {\n                                mutate(\n                                    {\n                                        resource: resource.name,\n                                        id: idFromParams,\n                                    },\n                                    {\n                                        onSuccess: () => {\n                                            const p = getToPath({\n                                                resource,\n                                                action: \"list\",\n                                                legacy: routerType === \"legacy\",\n                                            });\n\n                                            if (p) {\n                                                if (routerType === \"legacy\") {\n                                                    push(p);\n                                                } else {\n                                                    go({ to: p });\n                                                }\n                                            }\n                                        },\n                                    },\n                                );\n                            },\n                        }),\n                        createAction({\n                            name: t(`buttons.cancel`, \"Cancel\"),\n                            parent: \"delete\",\n                            perform: () => null,\n                        }),\n                    );\n                }\n            }\n        }\n        return tempActions;\n    };\n    useRegisterActions(actions, [actions]);\n};\n","// Capitalize first letter of each word\nexport const capitalize = (str: string): string =>\n    str.replace(\n        /\\w\\S*/g,\n        (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase(),\n    );\n","import React from \"react\";\nimport { KBarPortal, KBarPositioner, KBarAnimator, KBarSearch } from \"kbar\";\n\nimport { RenderResults } from \"@components\";\n\nexport const CommandBar: React.FC = () => {\n    const searchStyle = {\n        padding: \"12px 16px\",\n        fontSize: \"16px\",\n        width: \"100%\",\n        boxSizing: \"border-box\" as React.CSSProperties[\"boxSizing\"],\n        outline: \"none\",\n        border: \"none\",\n        background: \"rgb(252 252 252)\",\n        color: \"black\",\n    };\n\n    const animatorStyle = {\n        maxWidth: \"600px\",\n        width: \"100%\",\n        background: \"white\",\n        color: \"black\",\n        borderRadius: \"8px\",\n        overflow: \"hidden\",\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    };\n\n    const positionerStyle = {\n        opacity: 1,\n        transition: \"background 0.35s cubic-bezier(0.4, 0, 0.2, 1) 0s\",\n        backdropFilter: \"saturate(180%) blur(1px)\",\n        background: \"rgba(0, 0, 0, 0.1)\",\n        zIndex: \"9999\",\n    };\n\n    return (\n        <KBarPortal>\n            <KBarPositioner style={positionerStyle}>\n                <KBarAnimator style={animatorStyle}>\n                    <KBarSearch style={searchStyle} />\n                    <RenderResults />\n                </KBarAnimator>\n            </KBarPositioner>\n        </KBarPortal>\n    );\n};\n","import React from \"react\";\nimport { ActionId, KBarResults, useMatches } from \"kbar\";\n\nimport { ResultItem } from \"@components\";\n\nconst groupNameStyle = {\n    padding: \"8px 16px\",\n    fontSize: \"14px\",\n    textTransform: \"uppercase\" as const,\n    fontWeight: \"bold\",\n    opacity: 0.5,\n};\nexport const RenderResults: React.FC = () => {\n    const { results, rootActionId } = useMatches();\n\n    return (\n        <KBarResults\n            items={results}\n            onRender={({ item, active }) => {\n                return typeof item === \"string\" ? (\n                    <div style={groupNameStyle}>{item}</div>\n                ) : (\n                    <ResultItem\n                        action={item}\n                        active={active}\n                        currentRootActionId={rootActionId as ActionId}\n                    />\n                );\n            }}\n        />\n    );\n};\n","import React from \"react\";\nimport { ActionImpl, ActionId } from \"kbar\";\n\ninterface IResultITemProps {\n    action: ActionImpl;\n    active: boolean;\n    currentRootActionId: ActionId;\n}\nexport const ResultItem = React.forwardRef<HTMLDivElement, IResultITemProps>(\n    ({ action, active, currentRootActionId }, ref) => {\n        const ancestors = React.useMemo(() => {\n            if (!currentRootActionId) return action.ancestors;\n            const index = action.ancestors.findIndex(\n                (ancestor) => ancestor.id === currentRootActionId,\n            );\n            return action.ancestors.slice(index + 1);\n        }, [action.ancestors, currentRootActionId]);\n\n        return (\n            <div\n                ref={ref}\n                style={{\n                    padding: \"12px 16px\",\n                    background: active ? \"rgba(0 0 0 / 0.05)\" : \"transparent\",\n                    borderLeft: `2px solid ${\n                        active ? \"rgb(28 28 29)\" : \"transparent\"\n                    }`,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    cursor: \"pointer\",\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        gap: \"8px\",\n                        alignItems: \"center\",\n                        fontSize: 14,\n                    }}\n                >\n                    {action.icon && action.icon}\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <div>\n                            {ancestors.length > 0 &&\n                                ancestors.map((ancestor) => (\n                                    <React.Fragment key={ancestor.id}>\n                                        <span\n                                            style={{\n                                                opacity: 0.5,\n                                                marginRight: 8,\n                                            }}\n                                        >\n                                            {ancestor.name}\n                                        </span>\n                                        <span\n                                            style={{\n                                                marginRight: 8,\n                                            }}\n                                        >\n                                            &rsaquo;\n                                        </span>\n                                    </React.Fragment>\n                                ))}\n                            <span\n                                style={{\n                                    color:\n                                        action.name.toLocaleUpperCase() ===\n                                        \"DELETE\"\n                                            ? \"red\"\n                                            : \"black\",\n                                }}\n                            >\n                                {action.name}\n                            </span>\n                        </div>\n                        {action.subtitle && (\n                            <span style={{ fontSize: 12 }}>\n                                {action.subtitle}\n                            </span>\n                        )}\n                    </div>\n                </div>\n                {action.shortcut?.length ? (\n                    <div\n                        aria-hidden\n                        style={{\n                            display: \"grid\",\n                            gridAutoFlow: \"column\",\n                            gap: \"4px\",\n                        }}\n                    >\n                        {action.shortcut.map((sc) => (\n                            <kbd\n                                key={sc}\n                                style={{\n                                    padding: \"4px 6px\",\n                                    background: \"rgba(0 0 0 / .1)\",\n                                    borderRadius: \"4px\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                {sc}\n                            </kbd>\n                        ))}\n                    </div>\n                ) : null}\n            </div>\n        );\n    },\n);\n\nResultItem.displayName = \"ResultItem\";\n","import React, { useContext } from \"react\";\n\nimport { RefineKbarPropsContext } from \"./../../index\";\nimport { useRefineKbar } from \"@hooks\";\nimport { CommandBar } from \"@components\";\n\nexport const RefineKbar: React.FC<{\n    commandBarProps?: React.ComponentProps<typeof CommandBar>;\n}> = ({ commandBarProps }) => {\n    const context = useContext(RefineKbarPropsContext);\n    useRefineKbar();\n    const props = { ...context, ...commandBarProps };\n\n    return <CommandBar {...props} />;\n};\n"],"mappings":"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","names":["src_exports","__export","RefineKbar","RefineKbarPropsContext","RefineKbarProvider","useRefineKbar","__toCommonJS","import_react","import_kbar","__reExport","src_exports","import_react","import_core","import_kbar","capitalize","str","txt","import_core","useRefineKbar","t","resourceFromParams","resources","idFromParams","actionFromParams","routerType","getToPath","go","mutate","push","goToList","goToCreate","goToShow","goToEdit","kbarContext","can","actions","setActions","moveActionToFirst","resource","createActionWithResource","action","orderedResources","fromIndex","_a","_b","element","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","name","deprecatedLabel","list","create","canCreate","canEdit","canShow","deprecatedIcon","show","deprecatedCanDelete","edit","route","label","icon","canDelete","section","tempActions","canList","capitalize","p","canAccessCreate","canAccessShow","canAccessEdit","canAccessDelete","import_react","import_kbar","CommandBar","React","RenderResults","import_react","import_kbar","groupNameStyle","RenderResults","results","rootActionId","React","item","active","ResultItem","import_react","ResultItem","React","action","active","currentRootActionId","ref","_a","ancestors","index","ancestor","sc","import_react","RefineKbar","commandBarProps","context","RefineKbarPropsContext","useRefineKbar","props","React","CommandBar","RefineKbarPropsContext","RefineKbarProvider","children","commandBarProps","React"]}