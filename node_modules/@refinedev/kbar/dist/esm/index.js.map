{"version":3,"sources":["../../src/index.tsx","../../src/hooks/useRefineKbar/index.tsx","../../src/definitions/capitalize/index.ts","../../src/components/commandBar/index.tsx","../../src/components/renderResults/index.tsx","../../src/components/resultItem/index.tsx","../../src/components/refineKbar/index.tsx"],"sourcesContent":["import React, { createContext } from \"react\";\nimport { KBarProvider, KBarProviderProps } from \"kbar\";\n\nimport { CommandBar } from \"@components\";\n\ninterface IKBarProviderProps extends KBarProviderProps {\n    commandBarProps?: React.ComponentProps<typeof CommandBar>;\n}\n\nexport const RefineKbarPropsContext = createContext<\n    IKBarProviderProps[\"commandBarProps\"]\n>({});\n\nexport const RefineKbarProvider: React.FunctionComponent<\n    IKBarProviderProps & { children: React.ReactNode }\n> = ({ children, commandBarProps }) => {\n    return (\n        <RefineKbarPropsContext.Provider value={commandBarProps ?? {}}>\n            <KBarProvider>{children}</KBarProvider>\n        </RefineKbarPropsContext.Provider>\n    );\n};\n\nexport * from \"kbar\";\n\nexport { useRefineKbar } from \"@hooks\";\nexport { RefineKbar } from \"@components\";\n","import { useEffect, useState, useContext } from \"react\";\nimport {\n    useNavigation,\n    useDelete,\n    useTranslate,\n    useResource,\n    IResourceItem,\n    useCanWithoutCache,\n    userFriendlyResourceName,\n    useRouterType,\n    useGo,\n} from \"@refinedev/core\";\nimport {\n    useRegisterActions,\n    createAction,\n    Action,\n    KBarContext,\n    VisualState,\n} from \"kbar\";\n\nimport { capitalize } from \"@definitions\";\nimport { useGetToPath } from \"@refinedev/core\";\n\nenum RefineKbarActionType {\n    List = \"list\",\n    Create = \"create\",\n    Show = \"show\",\n    Edit = \"edit\",\n    Delete = \"delete\",\n}\n\nexport const useRefineKbar = (): void => {\n    const t = useTranslate();\n    const {\n        resource: resourceFromParams,\n        resources,\n        id: idFromParams,\n        action: actionFromParams,\n    } = useResource();\n    const routerType = useRouterType();\n    const getToPath = useGetToPath();\n    const go = useGo();\n    const { mutate } = useDelete();\n    const {\n        push,\n        list: goToList,\n        create: goToCreate,\n        show: goToShow,\n        edit: goToEdit,\n    } = useNavigation();\n\n    const kbarContext = useContext(KBarContext);\n\n    const { can } = useCanWithoutCache();\n\n    const [actions, setActions] = useState<Action[]>([]);\n\n    useEffect(() => {\n        const preaparedActions = async () => {\n            return await Promise.all(\n                moveActionToFirst().flatMap((resource) => {\n                    return createActionWithResource(resource);\n                }),\n            );\n        };\n\n        preaparedActions().then((actions) => {\n            return setActions(actions.flatMap((action) => action));\n        });\n    }, [resources, idFromParams, resourceFromParams, actionFromParams]);\n\n    useEffect(() => {\n        if (actions.length === 0) {\n            kbarContext.query.setVisualState(VisualState.hidden);\n        }\n    }, [actions]);\n\n    const moveActionToFirst = (): IResourceItem[] => {\n        const orderedResources = [...resources];\n        const fromIndex = orderedResources?.findIndex(\n            (resource) =>\n                (resource.identifier ?? resource?.name) ===\n                (resourceFromParams?.identifier ?? resourceFromParams?.name),\n        );\n\n        if (fromIndex > 0) {\n            const element = orderedResources[fromIndex];\n            orderedResources.splice(fromIndex, 1);\n            orderedResources.splice(0, 0, element);\n        }\n\n        return orderedResources;\n    };\n\n    const createActionWithResource = async (resource: IResourceItem) => {\n        const {\n            name,\n            label: deprecatedLabel,\n            list,\n            create,\n            canCreate,\n            canEdit,\n            canShow,\n            icon: deprecatedIcon,\n            show,\n            canDelete: deprecatedCanDelete,\n            edit,\n            route,\n        } = resource;\n\n        const label =\n            resource?.meta?.label ??\n            resource?.options?.label ??\n            deprecatedLabel;\n\n        const icon =\n            resource?.meta?.icon ?? resource?.options?.icon ?? deprecatedIcon;\n\n        const canDelete =\n            resource?.meta?.canDelete ??\n            resource?.options?.canDelete ??\n            deprecatedCanDelete;\n\n        const section =\n            label ??\n            t(\n                `${resource.name}.${resource.name}`,\n                userFriendlyResourceName(resource.name, \"plural\"),\n            );\n        const tempActions: Action[] = [];\n\n        if (\n            list &&\n            ((resourceFromParams !== undefined &&\n                resourceFromParams?.name !== name) ||\n                (actionFromParams !== undefined &&\n                    resourceFromParams?.name === name))\n        ) {\n            const { can: canList } = (await can?.({\n                resource: name,\n                action: RefineKbarActionType.Show,\n                params: { id: idFromParams, resource },\n            })) || { can: true };\n            if (canList) {\n                tempActions.push(\n                    createAction({\n                        name: t(\n                            `actions.list`,\n                            capitalize(RefineKbarActionType.List),\n                        ),\n                        section,\n                        icon,\n                        perform: () => {\n                            const p = getToPath({\n                                resource,\n                                action: \"list\",\n                                legacy: routerType === \"legacy\",\n                            });\n\n                            if (p) {\n                                if (routerType === \"legacy\") {\n                                    push(p);\n                                } else {\n                                    go({ to: p });\n                                }\n                            }\n                        },\n                    }),\n                );\n            }\n        }\n        if (\n            (canCreate || !!create) &&\n            create &&\n            (RefineKbarActionType.Create !== actionFromParams ||\n                resourceFromParams?.name !== name)\n        ) {\n            const { can: canAccessCreate } = (await can?.({\n                resource: name,\n                action: RefineKbarActionType.Create,\n                params: { resource },\n            })) || { can: true };\n\n            if (canAccessCreate) {\n                tempActions.push(\n                    createAction({\n                        name: t(\n                            `actions.create`,\n                            capitalize(RefineKbarActionType.Create),\n                        ),\n                        section,\n                        icon,\n                        keywords: \"new\",\n                        perform: () => {\n                            const p = getToPath({\n                                resource,\n                                action: \"create\",\n                                legacy: routerType === \"legacy\",\n                            });\n\n                            if (p) {\n                                if (routerType === \"legacy\") {\n                                    push(p);\n                                } else {\n                                    go({ to: p });\n                                }\n                            }\n                        },\n                    }),\n                );\n            }\n        }\n\n        if (resourceFromParams?.name === name && idFromParams) {\n            if (\n                (canShow || !!show) &&\n                show &&\n                RefineKbarActionType.Show !== actionFromParams\n            ) {\n                const { can: canAccessShow } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n\n                if (canAccessShow) {\n                    tempActions.push(\n                        createAction({\n                            name: t(\n                                `actions.show`,\n                                capitalize(RefineKbarActionType.Show),\n                            ),\n                            section,\n                            icon,\n                            perform: () => {\n                                const p = getToPath({\n                                    resource,\n                                    action: \"show\",\n                                    legacy: routerType === \"legacy\",\n                                    meta: {\n                                        id: idFromParams,\n                                    },\n                                });\n\n                                if (p) {\n                                    if (routerType === \"legacy\") {\n                                        push(p);\n                                    } else {\n                                        go({ to: p });\n                                    }\n                                }\n                            },\n                        }),\n                    );\n                }\n            }\n            if (\n                (canEdit || !!edit) &&\n                edit &&\n                RefineKbarActionType.Edit !== actionFromParams\n            ) {\n                const { can: canAccessEdit } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n                if (canAccessEdit) {\n                    tempActions.push(\n                        createAction({\n                            name: t(\n                                `actions.edit`,\n                                capitalize(RefineKbarActionType.Edit),\n                            ),\n                            section,\n                            icon,\n                            perform: () => {\n                                const p = getToPath({\n                                    resource,\n                                    action: \"edit\",\n                                    legacy: routerType === \"legacy\",\n                                    meta: {\n                                        id: idFromParams,\n                                    },\n                                });\n\n                                if (p) {\n                                    if (routerType === \"legacy\") {\n                                        push(p);\n                                    } else {\n                                        go({ to: p });\n                                    }\n                                }\n                            },\n                        }),\n                    );\n                }\n            }\n            if (canDelete) {\n                const { can: canAccessDelete } = (await can?.({\n                    resource: name,\n                    action: RefineKbarActionType.Show,\n                    params: { id: idFromParams, resource },\n                })) || { can: true };\n                if (canAccessDelete) {\n                    tempActions.push(\n                        {\n                            id: \"delete\",\n                            name: t(\n                                `actions.delete`,\n                                capitalize(RefineKbarActionType.Delete),\n                            ),\n                            section,\n                            icon,\n                        },\n                        createAction({\n                            name: t(\n                                `buttons.delete`,\n                                capitalize(RefineKbarActionType.Delete),\n                            ),\n                            section: t(`buttons.confirm`, \"Are you sure?\"),\n                            parent: \"delete\",\n                            perform: () => {\n                                mutate(\n                                    {\n                                        resource: resource.name,\n                                        id: idFromParams,\n                                    },\n                                    {\n                                        onSuccess: () => {\n                                            const p = getToPath({\n                                                resource,\n                                                action: \"list\",\n                                                legacy: routerType === \"legacy\",\n                                            });\n\n                                            if (p) {\n                                                if (routerType === \"legacy\") {\n                                                    push(p);\n                                                } else {\n                                                    go({ to: p });\n                                                }\n                                            }\n                                        },\n                                    },\n                                );\n                            },\n                        }),\n                        createAction({\n                            name: t(`buttons.cancel`, \"Cancel\"),\n                            parent: \"delete\",\n                            perform: () => null,\n                        }),\n                    );\n                }\n            }\n        }\n        return tempActions;\n    };\n    useRegisterActions(actions, [actions]);\n};\n","// Capitalize first letter of each word\nexport const capitalize = (str: string): string =>\n    str.replace(\n        /\\w\\S*/g,\n        (txt) => txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase(),\n    );\n","import React from \"react\";\nimport { KBarPortal, KBarPositioner, KBarAnimator, KBarSearch } from \"kbar\";\n\nimport { RenderResults } from \"@components\";\n\nexport const CommandBar: React.FC = () => {\n    const searchStyle = {\n        padding: \"12px 16px\",\n        fontSize: \"16px\",\n        width: \"100%\",\n        boxSizing: \"border-box\" as React.CSSProperties[\"boxSizing\"],\n        outline: \"none\",\n        border: \"none\",\n        background: \"rgb(252 252 252)\",\n        color: \"black\",\n    };\n\n    const animatorStyle = {\n        maxWidth: \"600px\",\n        width: \"100%\",\n        background: \"white\",\n        color: \"black\",\n        borderRadius: \"8px\",\n        overflow: \"hidden\",\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n    };\n\n    const positionerStyle = {\n        opacity: 1,\n        transition: \"background 0.35s cubic-bezier(0.4, 0, 0.2, 1) 0s\",\n        backdropFilter: \"saturate(180%) blur(1px)\",\n        background: \"rgba(0, 0, 0, 0.1)\",\n        zIndex: \"9999\",\n    };\n\n    return (\n        <KBarPortal>\n            <KBarPositioner style={positionerStyle}>\n                <KBarAnimator style={animatorStyle}>\n                    <KBarSearch style={searchStyle} />\n                    <RenderResults />\n                </KBarAnimator>\n            </KBarPositioner>\n        </KBarPortal>\n    );\n};\n","import React from \"react\";\nimport { ActionId, KBarResults, useMatches } from \"kbar\";\n\nimport { ResultItem } from \"@components\";\n\nconst groupNameStyle = {\n    padding: \"8px 16px\",\n    fontSize: \"14px\",\n    textTransform: \"uppercase\" as const,\n    fontWeight: \"bold\",\n    opacity: 0.5,\n};\nexport const RenderResults: React.FC = () => {\n    const { results, rootActionId } = useMatches();\n\n    return (\n        <KBarResults\n            items={results}\n            onRender={({ item, active }) => {\n                return typeof item === \"string\" ? (\n                    <div style={groupNameStyle}>{item}</div>\n                ) : (\n                    <ResultItem\n                        action={item}\n                        active={active}\n                        currentRootActionId={rootActionId as ActionId}\n                    />\n                );\n            }}\n        />\n    );\n};\n","import React from \"react\";\nimport { ActionImpl, ActionId } from \"kbar\";\n\ninterface IResultITemProps {\n    action: ActionImpl;\n    active: boolean;\n    currentRootActionId: ActionId;\n}\nexport const ResultItem = React.forwardRef<HTMLDivElement, IResultITemProps>(\n    ({ action, active, currentRootActionId }, ref) => {\n        const ancestors = React.useMemo(() => {\n            if (!currentRootActionId) return action.ancestors;\n            const index = action.ancestors.findIndex(\n                (ancestor) => ancestor.id === currentRootActionId,\n            );\n            return action.ancestors.slice(index + 1);\n        }, [action.ancestors, currentRootActionId]);\n\n        return (\n            <div\n                ref={ref}\n                style={{\n                    padding: \"12px 16px\",\n                    background: active ? \"rgba(0 0 0 / 0.05)\" : \"transparent\",\n                    borderLeft: `2px solid ${\n                        active ? \"rgb(28 28 29)\" : \"transparent\"\n                    }`,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                    cursor: \"pointer\",\n                }}\n            >\n                <div\n                    style={{\n                        display: \"flex\",\n                        gap: \"8px\",\n                        alignItems: \"center\",\n                        fontSize: 14,\n                    }}\n                >\n                    {action.icon && action.icon}\n                    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        <div>\n                            {ancestors.length > 0 &&\n                                ancestors.map((ancestor) => (\n                                    <React.Fragment key={ancestor.id}>\n                                        <span\n                                            style={{\n                                                opacity: 0.5,\n                                                marginRight: 8,\n                                            }}\n                                        >\n                                            {ancestor.name}\n                                        </span>\n                                        <span\n                                            style={{\n                                                marginRight: 8,\n                                            }}\n                                        >\n                                            &rsaquo;\n                                        </span>\n                                    </React.Fragment>\n                                ))}\n                            <span\n                                style={{\n                                    color:\n                                        action.name.toLocaleUpperCase() ===\n                                        \"DELETE\"\n                                            ? \"red\"\n                                            : \"black\",\n                                }}\n                            >\n                                {action.name}\n                            </span>\n                        </div>\n                        {action.subtitle && (\n                            <span style={{ fontSize: 12 }}>\n                                {action.subtitle}\n                            </span>\n                        )}\n                    </div>\n                </div>\n                {action.shortcut?.length ? (\n                    <div\n                        aria-hidden\n                        style={{\n                            display: \"grid\",\n                            gridAutoFlow: \"column\",\n                            gap: \"4px\",\n                        }}\n                    >\n                        {action.shortcut.map((sc) => (\n                            <kbd\n                                key={sc}\n                                style={{\n                                    padding: \"4px 6px\",\n                                    background: \"rgba(0 0 0 / .1)\",\n                                    borderRadius: \"4px\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                {sc}\n                            </kbd>\n                        ))}\n                    </div>\n                ) : null}\n            </div>\n        );\n    },\n);\n\nResultItem.displayName = \"ResultItem\";\n","import React, { useContext } from \"react\";\n\nimport { RefineKbarPropsContext } from \"./../../index\";\nimport { useRefineKbar } from \"@hooks\";\nimport { CommandBar } from \"@components\";\n\nexport const RefineKbar: React.FC<{\n    commandBarProps?: React.ComponentProps<typeof CommandBar>;\n}> = ({ commandBarProps }) => {\n    const context = useContext(RefineKbarPropsContext);\n    useRefineKbar();\n    const props = { ...context, ...commandBarProps };\n\n    return <CommandBar {...props} />;\n};\n"],"mappings":"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","names":["React","createContext","KBarProvider","useEffect","useState","useContext","useNavigation","useDelete","useTranslate","useResource","useCanWithoutCache","userFriendlyResourceName","useRouterType","useGo","useRegisterActions","createAction","KBarContext","VisualState","capitalize","str","txt","useGetToPath","useRefineKbar","t","useTranslate","resourceFromParams","resources","idFromParams","actionFromParams","useResource","routerType","useRouterType","getToPath","useGetToPath","go","useGo","mutate","useDelete","push","goToList","goToCreate","goToShow","goToEdit","useNavigation","kbarContext","useContext","KBarContext","can","useCanWithoutCache","actions","setActions","useState","useEffect","moveActionToFirst","resource","createActionWithResource","action","VisualState","orderedResources","fromIndex","_a","_b","element","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","name","deprecatedLabel","list","create","canCreate","canEdit","canShow","deprecatedIcon","show","deprecatedCanDelete","edit","route","label","icon","canDelete","section","userFriendlyResourceName","tempActions","canList","createAction","capitalize","p","canAccessCreate","canAccessShow","canAccessEdit","canAccessDelete","useRegisterActions","React","KBarPortal","KBarPositioner","KBarAnimator","KBarSearch","CommandBar","React","KBarPortal","KBarPositioner","KBarAnimator","KBarSearch","RenderResults","React","KBarResults","useMatches","groupNameStyle","RenderResults","results","rootActionId","useMatches","React","KBarResults","item","active","ResultItem","React","ResultItem","action","active","currentRootActionId","ref","_a","ancestors","index","ancestor","sc","React","useContext","RefineKbar","commandBarProps","context","useContext","RefineKbarPropsContext","useRefineKbar","props","React","CommandBar","RefineKbarPropsContext","createContext","RefineKbarProvider","children","commandBarProps","React","KBarProvider"]}